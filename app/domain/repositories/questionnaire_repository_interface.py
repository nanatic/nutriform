from abc import ABC, abstractmethod
from typing import List, Dict, Any
import uuid

from app.domain.models.questionnaire import (
    QuestionnaireCreate, QuestionnaireUpdate, QuestionnaireRead,
    QuestionCreate, QuestionUpdate, QuestionRead
)


class IQuestionnaireRepository(ABC):
    # ——— Шаблоны опросников ———
    @abstractmethod
    def list_questionnaires(self) -> List[Dict[str, Any]]: ...
    @abstractmethod
    def get_questionnaire(self, questionnaire_id: int) -> Dict[str, Any]: ...
    @abstractmethod
    def create_questionnaire(self, data: QuestionnaireCreate) -> int: ...
    @abstractmethod
    def update_questionnaire(self, questionnaire_id: int, data: QuestionnaireUpdate) -> None: ...
    @abstractmethod
    def delete_questionnaire(self, questionnaire_id: int) -> None: ...

    # ——— Вопросы ———
    @abstractmethod
    def list_questions(self, questionnaire_id: int) -> List[Dict[str, Any]]: ...
    @abstractmethod
    def get_question(self, question_id: int) -> Dict[str, Any]: ...
    @abstractmethod
    def create_question(self, data: QuestionCreate) -> int: ...
    @abstractmethod
    def update_question(self, question_id: int, data: QuestionUpdate) -> None: ...
    @abstractmethod
    def delete_question(self, question_id: int) -> None: ...

    # ——— Submissions и Answers ——— (существующие)
    @abstractmethod
    def create_submission(self, patient_id: int, questionnaire_type: str, responses: Dict[str, Any]) -> uuid.UUID: ...
    @abstractmethod
    def get_submissions_by_patient(self, patient_id: int) -> List[Dict[str, Any]]: ...
    @abstractmethod
    def add_answer(self, submission_id: uuid.UUID, question_id: int, answer_data: Dict[str, Any]) -> int: ...
